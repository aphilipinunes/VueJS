    @mixin box-shadow($left, $top, $radius, $color) {
        box-shadow: $left $top $radius $color;
        -webkit-box-shadow: $left $top $radius $color;
        -moz-box-shadow: $left $top $radius $color;
    }
    
    @mixin border-radius($radius) {
        border-radius: $radius;
        -webkit-border-radius: $radius;
        -moz-border-radius: $radius;
    }
    
    @mixin border-radius-pos($topleft, $topright, $bottomright, $bottomleft) {
        border-top-left-radius: $topleft;
        border-top-right-radius: $topright;
        border-bottom-right-radius: $bottomright;
        border-bottom-left-radius: $bottomleft;
        -webkit-border-top-left-radius: $topleft;
        -webkit-border-top-right-radius: $topright;
        -webkit-border-bottom-right-radius: $bottomright;
        -webkit-border-bottom-left-radius: $bottomleft;
        -moz-border-radius-topleft: $topleft;
        -moz-border-radius-topright: $topright;
        -moz-border-radius-bottomright: $bottomright;
        -moz-border-radius-bottomleft: $bottomleft;
    }
    
    // @mixin gradient($color1, $color2) {
    //   background-color: $color1;
    //   filter: progid:DXImageTransform.Microsoft.gradient(GradientType=1, startColorstr=#{$color1}, endColorstr=#{$color2});
    //   background-image: -moz-linear-gradient(-45deg, $color1 0%, $color2 100%);
    //   background-image: -webkit-gradient(-45deg, 0% 0%, 0% 100%, from($color1), to($color2));
    // }
    // FLEXBOX
    @mixin flexbox {
        display: -webkit-box;
        display: -webkit-flex;
        display: -moz-flex;
        display: -ms-flexbox;
        display: flex;
    }
    
    %flexbox {
        @include flexbox;
    } //----------------------------------
    @mixin inline-flex {
        display: -webkit-inline-box;
        display: -webkit-inline-flex;
        display: -moz-inline-flex;
        display: -ms-inline-flexbox;
        display: inline-flex;
    }
    
    %inline-flex {
        @include inline-flex;
    }
    
    @mixin align-content($value: stretch) {
        // No Webkit Box Fallback.
        -webkit-align-content: $value;
        -moz-align-content: $value;
        @if $value==flex-start {
            -ms-flex-line-pack: start;
        }
        @else if $value==flex-end {
            -ms-flex-line-pack: end;
        }
        @else {
            -ms-flex-line-pack: $value;
        }
        align-content: $value;
    }
    
    @mixin align-items($value: stretch) {
        @if $value==flex-start {
            -webkit-box-align: start;
            -ms-flex-align: start;
        }
        @else if $value==flex-end {
            -webkit-box-align: end;
            -ms-flex-align: end;
        }
        @else {
            -webkit-box-align: $value;
            -ms-flex-align: $value;
        }
        -webkit-align-items: $value;
        -moz-align-items: $value;
        align-items: $value;
    }
    
    @mixin flex-wrap($value: nowrap) {
        // No Webkit Box fallback.
        -webkit-flex-wrap: $value;
        -moz-flex-wrap: $value;
        @if $value==nowrap {
            -ms-flex-wrap: none;
        }
        @else {
            -ms-flex-wrap: $value;
        }
        flex-wrap: $value;
    }
    
    @mixin justify-content($value: flex-start) {
        @if $value==flex-start {
            -webkit-box-pack: start;
            -ms-flex-pack: start;
        }
        @else if $value==flex-end {
            -webkit-box-pack: end;
            -ms-flex-pack: end;
        }
        @else if $value==space-between {
            -webkit-box-pack: justify;
            -ms-flex-pack: justify;
        }
        @else if $value==space-around {
            -ms-flex-pack: distribute;
        }
        @else {
            -webkit-box-pack: $value;
            -ms-flex-pack: $value;
        }
        -webkit-justify-content: $value;
        -moz-justify-content: $value;
        justify-content: $value;
    }
    
    @mixin flex-direction($value: row) {
        @if $value==row-reverse {
            -webkit-box-direction: reverse;
            -webkit-box-orient: horizontal;
        }
        @else if $value==column {
            -webkit-box-direction: normal;
            -webkit-box-orient: vertical;
        }
        @else if $value==column-reverse {
            -webkit-box-direction: reverse;
            -webkit-box-orient: vertical;
        }
        @else {
            -webkit-box-direction: normal;
            -webkit-box-orient: horizontal;
        }
        -webkit-flex-direction: $value;
        -moz-flex-direction: $value;
        -ms-flex-direction: $value;
        flex-direction: $value;
    }
    
    @mixin flex-flow( $values: ( row nowrap)) {
        // No Webkit Box fallback.
        -webkit-flex-flow: $values;
        -moz-flex-flow: $values;
        -ms-flex-flow: $values;
        flex-flow: $values;
    }
    
    @mixin order($int: 0) {
        -webkit-box-ordinal-group: $int + 1;
        -webkit-order: $int;
        -moz-order: $int;
        -ms-flex-order: $int;
        order: $int;
    }

    // =============================================================================
// Transform
// =============================================================================
// Browser Prefixes
@mixin transform($transforms) {
    -webkit-transform: $transforms;
    -moz-transform: $transforms;
    -ms-transform: $transforms;
    transform: $transforms;
} // Rotate
@mixin rotate($deg) {
    @include transform(rotate(#{$deg}deg));
} // Scale
@mixin scale($scale) {
    @include transform(scale($scale));
} // ScaleX
@mixin scaleX($scaleX) {
    @include transform(scaleX($scaleX));
} // Translate
@mixin translate($x,
$y) {
    @include transform(translate($x, $y));
} // Skew
@mixin skew($x,
$y) {
    @include transform(skew(#{$x}deg, #{$y}deg));
} // Transform Origin
@mixin transform-origin($origin) {
    -webkit-transform-origin: $origin;
    -moz-transform-origin: $origin;
    -ms-transform-origin: $origin;
    transform-origin: $origin;
}